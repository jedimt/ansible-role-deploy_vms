---
# tasks file for jedimt.deploy_vms

# Get a list of VMs. If we find all the hosts, skip deployment
- name: Gather all VMs from folder {{ vcenter_folder }}
  community.vmware.vmware_vm_info:
    folder: "{{ vcenter_folder }}"
  delegate_to: localhost
  connection: local
  register: vm_info
  tags: vm_info

- name: Extract VM names found
  ansible.builtin.set_fact:
    vms_found: "{{ vm_info.virtual_machines | map(attribute='guest_name') | sort | list }}"
  tags: vm_info

# This gives a list like so:
# {
#     "vms_found": [
#         "dev-k8s-haproxy-01.tme.nebulon.com",
#         "dev-k8s-haproxy-01.tme.nebulon.com",
#         "dev-k8s-master-01.tme.nebulon.com",
#         "dev-k8s-master-02.tme.nebulon.com",
#         "dev-k8s-master-03.tme.nebulon.com",
#         "dev-k8s-node-01.tme.nebulon.com",
#         "dev-k8s-node-02.tme.nebulon.com",
#         "dev-k8s-node-03.tme.nebulon.com",
#         "dev-k8s-node-04.tme.nebulon.com"
#     ]
# }

- name: Extract the hostnames that should be deployed
  ansible.builtin.set_fact:
    vm_inventory: "{{ groups.servers | \
      map('extract', hostvars, 'inventory_hostname') | sort | list }}"
  tags: vm_info

# Set the skip_vm_check variable to true so we skip checking for VMs if the
# VMs turn out to already be deployed. Will set to false if the deployment task fires.
- name: Set variable for inventory match
  ansible.builtin.set_fact:
    skip_vm_check: true

# Get a list of possible datastores
- name: Gather available datastores
  community.vmware.vmware_datastore_info:
    datacenter: "{{ vcenter_datacenter }}"
  register: datastores
  when: "vms_found != vm_inventory"
  tags: vm_info

# Build list of shared datastores for the VMs
- name: Select candidate datastores
  ansible.builtin.set_fact:
    dest_datastores: "{{ datastores.datastores | \
                        selectattr('type', 'match', 'VMFS') | \
                        selectattr('multipleHostAccess', 'equalto', True) | \
                        map(attribute='name') | sort | list }}"
  when: "vms_found != vm_inventory"

- name: Deploy VM from template
  community.vmware.vmware_guest:
    datacenter: "{{ vcenter_datacenter }}"
    cluster: "{{ vcenter_cluster }}"
    folder: "{{ vcenter_folder }}"
    name: "{{ hostvars[item]['inventory_hostname'] }}"
    guest_id: '{{ guest_id }}'
    disk:
      - size_gb: "{{ hostvars[item]['size_gb'] }}"
        type: thin
        # Deploy to a random candidate datastore to spread load
        datastore: "{{ dest_datastores | random }}"
    # The network settings get modified (changes DVS port) every time this runs
    # which makes this module non-idempotent. Only way to make the playbook idempotent
    # is to skip this entire task if the VM already exists.
    # https://github.com/ansible-collections/community.vmware/issues/1499
    # https://github.com/ansible-collections/community.vmware/issues/498
    networks:
      - name: "{{ guest_network }}"
        ip: "{{ hostvars[item]['guest_custom_ip'] }}"
        netmask: "{{ guest_netmask }}"
        gateway: "{{ guest_gateway }}"
        dns_servers:
          - "{{ guest_dns_server }}"
    hardware:
      memory_mb: "{{ hostvars[item]['memory_mb'] }}"
      num_cpus: "{{ hostvars[item]['guest_vcpu'] }}"
    customization:
      dns_servers:
        - "{{ guest_dns_server }}"
      domain: "{{ guest_domain_name }}"
      hostname: "{{ hostvars[item]['inventory_hostname'] }}"
    template: '{{ guest_template }}'
    wait_for_ip_address: false
  with_items: "{{ groups['servers'] }}"
  when: "vms_found != vm_inventory"
  register: vms_deployed
  notify:
    - Set vm_deployed flag

- name: Power on VMs
  community.vmware.vmware_guest_powerstate:
    folder: '{{ vcenter_folder }}'
    name: "{{ hostvars[item]['inventory_hostname'] }}"
    state: powered-on
  with_items: "{{ groups['servers'] }}"
  notify:
    - Pause for customization
  tags: power
